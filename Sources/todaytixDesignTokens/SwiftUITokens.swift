
//
// SwiftUITokens.swift
//

// Do not edit directly
// Generated on Fri, 14 Apr 2023 15:51:09 GMT


import SwiftUI

public enum SwiftUITokens {
    public static let borderRadiusLg = CGFloat(8)
    public static let borderRadiusSm = CGFloat(4)
    public static let borderRadiusXl = CGFloat(16)
    public static let borderWidthLg = CGFloat(8)
    public static let borderWidthMd = CGFloat(4)
    public static let borderWidthNone = CGFloat(0)
    public static let borderWidthSm = CGFloat(2)
    public static let borderWidthXs = CGFloat(1)
    public static let coreBasic0 = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let coreBasic10 = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let coreBasic100 = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let coreBasic20 = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let coreBasic30 = Color(red: 0.753, green: 0.753, blue: 0.776, opacity: 1)
    public static let coreBasic40 = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let coreBasic50 = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let coreBasic60 = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let coreBasic70 = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let coreBasic80 = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let coreBasic90 = Color(red: 0.090, green: 0.086, blue: 0.122, opacity: 1)
    public static let coreBlue10 = Color(red: 0.898, green: 0.953, blue: 1.000, opacity: 1)
    public static let coreBlue100 = Color(red: 0.098, green: 0.145, blue: 0.188, opacity: 1)
    public static let coreBlue20 = Color(red: 0.800, green: 0.906, blue: 1.000, opacity: 1)
    public static let coreBlue30 = Color(red: 0.451, green: 0.737, blue: 1.000, opacity: 1)
    public static let coreBlue40 = Color(red: 0.271, green: 0.647, blue: 1.000, opacity: 1)
    public static let coreBlue50 = Color(red: 0.086, green: 0.561, blue: 1.000, opacity: 1)
    public static let coreBlue60 = Color(red: 0.000, green: 0.522, blue: 1.000, opacity: 1)
    public static let coreBlue70 = Color(red: 0.000, green: 0.416, blue: 0.800, opacity: 1)
    public static let coreBlue80 = Color(red: 0.000, green: 0.314, blue: 0.600, opacity: 1)
    public static let coreBlue90 = Color(red: 0.098, green: 0.196, blue: 0.282, opacity: 1)
    public static let coreGreen10 = Color(red: 0.898, green: 0.973, blue: 0.922, opacity: 1)
    public static let coreGreen100 = Color(red: 0.000, green: 0.145, blue: 0.039, opacity: 1)
    public static let coreGreen20 = Color(red: 0.800, green: 0.945, blue: 0.839, opacity: 1)
    public static let coreGreen30 = Color(red: 0.455, green: 0.878, blue: 0.573, opacity: 1)
    public static let coreGreen40 = Color(red: 0.271, green: 0.835, blue: 0.427, opacity: 1)
    public static let coreGreen50 = Color(red: 0.090, green: 0.796, blue: 0.286, opacity: 1)
    public static let coreGreen60 = Color(red: 0.000, green: 0.729, blue: 0.204, opacity: 1)
    public static let coreGreen70 = Color(red: 0.000, green: 0.584, blue: 0.165, opacity: 1)
    public static let coreGreen80 = Color(red: 0.000, green: 0.439, blue: 0.122, opacity: 1)
    public static let coreGreen90 = Color(red: 0.000, green: 0.290, blue: 0.082, opacity: 1)
    public static let coreOpacity30Black = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let coreOpacity30White = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 0.30196078431372547)
    public static let coreOpacity50Black = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.5019607843137255)
    public static let coreOpacity50White = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 0.5019607843137255)
    public static let coreOpacity80Black = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.8)
    public static let coreOrange10 = Color(red: 0.988, green: 0.949, blue: 0.922, opacity: 1)
    public static let coreOrange100 = Color(red: 0.122, green: 0.078, blue: 0.063, opacity: 1)
    public static let coreOrange20 = Color(red: 0.988, green: 0.867, blue: 0.780, opacity: 1)
    public static let coreOrange30 = Color(red: 0.988, green: 0.737, blue: 0.592, opacity: 1)
    public static let coreOrange40 = Color(red: 0.988, green: 0.569, blue: 0.384, opacity: 1)
    public static let coreOrange50 = Color(red: 0.910, green: 0.392, blue: 0.153, opacity: 1)
    public static let coreOrange60 = Color(red: 0.749, green: 0.282, blue: 0.082, opacity: 1)
    public static let coreOrange70 = Color(red: 0.561, green: 0.204, blue: 0.082, opacity: 1)
    public static let coreOrange80 = Color(red: 0.388, green: 0.169, blue: 0.090, opacity: 1)
    public static let coreOrange90 = Color(red: 0.251, green: 0.129, blue: 0.090, opacity: 1)
    public static let corePurple10 = Color(red: 0.957, green: 0.918, blue: 0.992, opacity: 1)
    public static let corePurple100 = Color(red: 0.149, green: 0.114, blue: 0.184, opacity: 1)
    public static let corePurple20 = Color(red: 0.910, green: 0.835, blue: 0.984, opacity: 1)
    public static let corePurple30 = Color(red: 0.671, green: 0.380, blue: 0.961, opacity: 1)
    public static let corePurple40 = Color(red: 0.635, green: 0.337, blue: 0.929, opacity: 1)
    public static let corePurple50 = Color(red: 0.588, green: 0.227, blue: 0.949, opacity: 1)
    public static let corePurple60 = Color(red: 0.545, green: 0.173, blue: 0.914, opacity: 1)
    public static let corePurple70 = Color(red: 0.471, green: 0.180, blue: 0.761, opacity: 1)
    public static let corePurple80 = Color(red: 0.435, green: 0.137, blue: 0.729, opacity: 1)
    public static let corePurple90 = Color(red: 0.200, green: 0.129, blue: 0.271, opacity: 1)
    public static let coreRed10 = Color(red: 1.000, green: 0.906, blue: 0.933, opacity: 1)
    public static let coreRed100 = Color(red: 0.200, green: 0.016, blue: 0.031, opacity: 1)
    public static let coreRed20 = Color(red: 1.000, green: 0.812, blue: 0.867, opacity: 1)
    public static let coreRed30 = Color(red: 1.000, green: 0.435, blue: 0.604, opacity: 1)
    public static let coreRed40 = Color(red: 1.000, green: 0.247, blue: 0.475, opacity: 1)
    public static let coreRed50 = Color(red: 1.000, green: 0.059, blue: 0.341, opacity: 1)
    public static let coreRed60 = Color(red: 1.000, green: 0.071, blue: 0.149, opacity: 1)
    public static let coreRed70 = Color(red: 0.800, green: 0.055, blue: 0.118, opacity: 1)
    public static let coreRed80 = Color(red: 0.600, green: 0.043, blue: 0.090, opacity: 1)
    public static let coreRed90 = Color(red: 0.400, green: 0.027, blue: 0.059, opacity: 1)
    public static let coreSeatMapAvailable = Color(red: 0.745, green: 0.827, blue: 0.886, opacity: 1)
    public static let coreSeatMapChartBg = Color(red: 0.906, green: 0.918, blue: 0.929, opacity: 1)
    public static let coreSeatMapHover = Color(red: 0.447, green: 0.639, blue: 0.776, opacity: 1)
    public static let coreSeatMapSelected = Color(red: 0.149, green: 0.475, blue: 0.710, opacity: 1)
    public static let coreSeatMapUnavailable = Color(red: 0.898, green: 0.910, blue: 0.922, opacity: 1)
    public static let coreTransparentTransparent = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkBackgroundBackgroundHover = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let darkBackgroundBackgroundInverse = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let darkBackgroundBackgroundInverseHover = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let darkBorderBorderDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkBorderBorderInverse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkBorderBorderStrong01 = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkBorderBorderSubtle01 = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkButtonButtonDisabled = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkButtonButtonPrimaryHover = Color(red: 0.800, green: 0.055, blue: 0.118, opacity: 1)
    public static let darkButtonButtonSecondary = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let darkButtonButtonSecondaryHover = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkButtonButtonTertiary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkButtonButtonTertiaryActive = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkButtonButtonTertiaryHover = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let darkFieldField01 = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkFieldField02 = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let darkFocusFocus = Color(red: 0.086, green: 0.561, blue: 1.000, opacity: 1)
    public static let darkIconIconDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkIconIconInverse = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkIconIconOnColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkIconIconOnColorDisabled = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkIconIconPrimary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkIconIconSecondary = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkIconIconTab = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkLayerLayer01 = Color(red: 0.090, green: 0.086, blue: 0.122, opacity: 1)
    public static let darkLayerLayer02 = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkLayerLayer03 = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let darkLayerLayerHover01 = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkLayerLayerHover02 = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkLayerLayerHover03 = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkLayerLayerSelectedInverse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkLayerLayerTransparent = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let darkLayerLayerTransparentHover = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkLinkLinkInverse = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkLinkLinkPrimary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkLinkLinkPrimaryHover = Color(red: 1.000, green: 0.059, blue: 0.341, opacity: 1)
    public static let darkMiscellaneousOverlay = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.8)
    public static let darkNotificationsErrorBackground = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkNotificationsErrorBorder = Color(red: 1.000, green: 0.435, blue: 0.604, opacity: 1)
    public static let darkNotificationsInfoBackground = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkNotificationsInfoBorder = Color(red: 0.451, green: 0.737, blue: 1.000, opacity: 1)
    public static let darkNotificationsSuccessBackground = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkNotificationsSupportSuccessBorder = Color(red: 0.455, green: 0.878, blue: 0.573, opacity: 1)
    public static let darkNotificationsWarningBackground = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let darkNotificationsWarningBorder = Color(red: 0.988, green: 0.737, blue: 0.592, opacity: 1)
    public static let darkSkeletonSkeletonBackground = Color(red: 0.090, green: 0.086, blue: 0.122, opacity: 1)
    public static let darkSkeletonSkeletonElement = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let darkSupportInverseSupportError = Color(red: 1.000, green: 0.071, blue: 0.149, opacity: 1)
    public static let darkSupportInverseSupportInfo = Color(red: 0.000, green: 0.522, blue: 1.000, opacity: 1)
    public static let darkSupportInverseSupportSuccess = Color(red: 0.000, green: 0.729, blue: 0.204, opacity: 1)
    public static let darkSupportInverseSupportWarning = Color(red: 0.749, green: 0.282, blue: 0.082, opacity: 1)
    public static let darkSupportSupportError = Color(red: 1.000, green: 0.247, blue: 0.475, opacity: 1)
    public static let darkSupportSupportInfo = Color(red: 0.271, green: 0.647, blue: 1.000, opacity: 1)
    public static let darkSupportSupportSuccess = Color(red: 0.271, green: 0.835, blue: 0.427, opacity: 1)
    public static let darkSupportSupportWarning = Color(red: 0.988, green: 0.569, blue: 0.384, opacity: 1)
    public static let darkTagBlueBackground = Color(red: 0.451, green: 0.737, blue: 1.000, opacity: 1)
    public static let darkTagBlueHover = Color(red: 0.271, green: 0.647, blue: 1.000, opacity: 1)
    public static let darkTagBlueText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTagBrandText = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkTagDeepblueBackground = Color(red: 0.000, green: 0.522, blue: 1.000, opacity: 1)
    public static let darkTagDeepblueHover = Color(red: 0.000, green: 0.416, blue: 0.800, opacity: 1)
    public static let darkTagDeepblueText = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkTagDisabledBackground = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let darkTagGrayBackground = Color(red: 0.753, green: 0.753, blue: 0.776, opacity: 1)
    public static let darkTagGrayHover = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let darkTagGrayText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTagGreenBackground = Color(red: 0.455, green: 0.878, blue: 0.573, opacity: 1)
    public static let darkTagGreenHover = Color(red: 0.271, green: 0.835, blue: 0.427, opacity: 1)
    public static let darkTagGreenText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTagOrangeBackground = Color(red: 0.988, green: 0.737, blue: 0.592, opacity: 1)
    public static let darkTagOrangeHover = Color(red: 0.988, green: 0.569, blue: 0.384, opacity: 1)
    public static let darkTagOrangeText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTagPurpleBackground = Color(red: 0.671, green: 0.380, blue: 0.961, opacity: 1)
    public static let darkTagPurpleHover = Color(red: 0.635, green: 0.337, blue: 0.929, opacity: 1)
    public static let darkTagPurpleText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTagRedBackground = Color(red: 1.000, green: 0.435, blue: 0.604, opacity: 1)
    public static let darkTagRedHover = Color(red: 1.000, green: 0.247, blue: 0.475, opacity: 1)
    public static let darkTagRedText = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTextTextDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkTextTextDiscount = Color(red: 1.000, green: 0.059, blue: 0.341, opacity: 1)
    public static let darkTextTextError = Color(red: 1.000, green: 0.071, blue: 0.149, opacity: 1)
    public static let darkTextTextHelper = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let darkTextTextInverse = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let darkTextTextOnColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkTextTextOnColorDisabled = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let darkTextTextPlaceholder = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let darkTextTextPrimary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let darkTextTextSecondary = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let darkTransparentTransparent = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let fontFamiliesBody = "Aktiv Grotesk App"
    public static let fontFamiliesHeading = "Gellix"
    public static let fontSizeMediumBase = CGFloat(18)
    public static let fontSizeMediumBodyPrimary = CGFloat(18)
    public static let fontSizeMediumBodySecondary = CGFloat(16)
    public static let fontSizeMediumBodyTertiary = CGFloat(14)
    public static let fontSizeMediumH1 = CGFloat(56)
    public static let fontSizeMediumH2 = CGFloat(45)
    public static let fontSizeMediumH3 = CGFloat(36)
    public static let fontSizeMediumH4 = CGFloat(29)
    public static let fontSizeMediumH5 = CGFloat(23)
    public static let fontSizeMediumH6 = CGFloat(23)
    public static let fontSizeMediumH7 = CGFloat(21)
    public static let fontSizeMediumScale = CGFloat(1.25)
    public static let fontSizeSmallBase = CGFloat(16)
    public static let fontSizeSmallBodyPrimary = CGFloat(16)
    public static let fontSizeSmallBodySecondary = CGFloat(14)
    public static let fontSizeSmallBodyTertiary = CGFloat(12)
    public static let fontSizeSmallH1 = CGFloat(49)
    public static let fontSizeSmallH2 = CGFloat(39)
    public static let fontSizeSmallH3 = CGFloat(31)
    public static let fontSizeSmallH4 = CGFloat(25)
    public static let fontSizeSmallH5 = CGFloat(20)
    public static let fontSizeSmallH6 = CGFloat(20)
    public static let fontSizeSmallH7 = CGFloat(18)
    public static let fontSizeSmallScale = CGFloat(1.25)
    public static let fontWeightsBodyBold = CGFloat(700)
    public static let fontWeightsBodyRegular = CGFloat(400)
    public static let fontWeightsHeadingBold = CGFloat(700)
    public static let fontWeightsHeadingRegular = CGFloat(400)
    public static let letterSpacingDefault = CGFloat(0)
    public static let letterSpacingIncreased = CGFloat(0.01)
    public static let lightBackgroundBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightBackgroundBackgroundHover = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let lightBackgroundBackgroundInverse = Color(red: 0.090, green: 0.086, blue: 0.122, opacity: 1)
    public static let lightBackgroundBackgroundInverseHover = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let lightBorderBorderDisabled = Color(red: 0.753, green: 0.753, blue: 0.776, opacity: 1)
    public static let lightBorderBorderInverse = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightBorderBorderStrong01 = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let lightBorderBorderSubtle01 = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightButtonButtonDisabled = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightButtonButtonPrimaryHover = Color(red: 0.600, green: 0.043, blue: 0.090, opacity: 1)
    public static let lightButtonButtonSecondary = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let lightButtonButtonSecondaryHover = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let lightButtonButtonTertiary = Color(red: 0.753, green: 0.753, blue: 0.776, opacity: 1)
    public static let lightButtonButtonTertiaryActive = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightButtonButtonTertiaryHover = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let lightFieldField01 = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightFieldField02 = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let lightFocusFocus = Color(red: 0.000, green: 0.522, blue: 1.000, opacity: 1)
    public static let lightIconIconDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let lightIconIconInverse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightIconIconOnColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightIconIconOnColorDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let lightIconIconPrimary = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightIconIconSecondary = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let lightIconIconTab = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let lightLayerLayer01 = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let lightLayerLayer02 = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightLayerLayer03 = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let lightLayerLayerHover01 = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightLayerLayerHover02 = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightLayerLayerHover03 = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightLayerLayerSelectedInverse = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightLayerLayerTransparent = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.30196078431372547)
    public static let lightLayerLayerTransparentHover = Color(red: 0.671, green: 0.671, blue: 0.698, opacity: 1)
    public static let lightLinkLinkInverse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightLinkLinkPrimary = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightLinkLinkPrimaryHover = Color(red: 1.000, green: 0.071, blue: 0.149, opacity: 1)
    public static let lightMiscellaneousOverlay = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 0.8)
    public static let lightNotificationsErrorBackground = Color(red: 1.000, green: 0.906, blue: 0.933, opacity: 1)
    public static let lightNotificationsErrorBorder = Color(red: 1.000, green: 0.812, blue: 0.867, opacity: 1)
    public static let lightNotificationsInfoBackground = Color(red: 0.898, green: 0.953, blue: 1.000, opacity: 1)
    public static let lightNotificationsInfoBorder = Color(red: 0.800, green: 0.906, blue: 1.000, opacity: 1)
    public static let lightNotificationsSuccessBackground = Color(red: 0.800, green: 0.945, blue: 0.839, opacity: 1)
    public static let lightNotificationsSupportSuccessBorder = Color(red: 0.800, green: 0.945, blue: 0.839, opacity: 1)
    public static let lightNotificationsWarningBackground = Color(red: 0.988, green: 0.949, blue: 0.922, opacity: 1)
    public static let lightNotificationsWarningBorder = Color(red: 0.988, green: 0.867, blue: 0.780, opacity: 1)
    public static let lightSkeletonSkeletonBackground = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let lightSkeletonSkeletonElement = Color(red: 0.753, green: 0.753, blue: 0.776, opacity: 1)
    public static let lightSupportInverseSupportError = Color(red: 1.000, green: 0.247, blue: 0.475, opacity: 1)
    public static let lightSupportInverseSupportInfo = Color(red: 0.086, green: 0.561, blue: 1.000, opacity: 1)
    public static let lightSupportInverseSupportSuccess = Color(red: 0.090, green: 0.796, blue: 0.286, opacity: 1)
    public static let lightSupportInverseSupportWarning = Color(red: 0.910, green: 0.392, blue: 0.153, opacity: 1)
    public static let lightSupportSupportError = Color(red: 0.800, green: 0.055, blue: 0.118, opacity: 1)
    public static let lightSupportSupportInfo = Color(red: 0.000, green: 0.416, blue: 0.800, opacity: 1)
    public static let lightSupportSupportSuccess = Color(red: 0.000, green: 0.584, blue: 0.165, opacity: 1)
    public static let lightSupportSupportWarning = Color(red: 0.561, green: 0.204, blue: 0.082, opacity: 1)
    public static let lightTagBlueBackground = Color(red: 0.800, green: 0.906, blue: 1.000, opacity: 1)
    public static let lightTagBlueHover = Color(red: 0.451, green: 0.737, blue: 1.000, opacity: 1)
    public static let lightTagBlueText = Color(red: 0.000, green: 0.314, blue: 0.600, opacity: 1)
    public static let lightTagBrandText = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightTagDeepblueBackground = Color(red: 0.000, green: 0.522, blue: 1.000, opacity: 1)
    public static let lightTagDeepblueHover = Color(red: 0.000, green: 0.416, blue: 0.800, opacity: 1)
    public static let lightTagDeepblueText = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightTagDisabledBackground = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightTagGrayBackground = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let lightTagGrayHover = Color(red: 0.835, green: 0.835, blue: 0.851, opacity: 1)
    public static let lightTagGrayText = Color(red: 0.173, green: 0.173, blue: 0.247, opacity: 1)
    public static let lightTagGreenBackground = Color(red: 0.898, green: 0.973, blue: 0.922, opacity: 1)
    public static let lightTagGreenHover = Color(red: 0.800, green: 0.945, blue: 0.839, opacity: 1)
    public static let lightTagGreenText = Color(red: 0.000, green: 0.439, blue: 0.122, opacity: 1)
    public static let lightTagOrangeBackground = Color(red: 0.988, green: 0.949, blue: 0.922, opacity: 1)
    public static let lightTagOrangeHover = Color(red: 0.988, green: 0.737, blue: 0.592, opacity: 1)
    public static let lightTagOrangeText = Color(red: 0.561, green: 0.204, blue: 0.082, opacity: 1)
    public static let lightTagPurpleBackground = Color(red: 0.957, green: 0.918, blue: 0.992, opacity: 1)
    public static let lightTagPurpleHover = Color(red: 0.910, green: 0.835, blue: 0.984, opacity: 1)
    public static let lightTagPurpleText = Color(red: 0.435, green: 0.137, blue: 0.729, opacity: 1)
    public static let lightTagRedBackground = Color(red: 1.000, green: 0.906, blue: 0.933, opacity: 1)
    public static let lightTagRedHover = Color(red: 1.000, green: 0.812, blue: 0.867, opacity: 1)
    public static let lightTagRedText = Color(red: 0.600, green: 0.043, blue: 0.090, opacity: 1)
    public static let lightTextTextDisabled = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let lightTextTextDiscount = Color(red: 1.000, green: 0.071, blue: 0.149, opacity: 1)
    public static let lightTextTextError = Color(red: 0.600, green: 0.043, blue: 0.090, opacity: 1)
    public static let lightTextTextHelper = Color(red: 0.239, green: 0.235, blue: 0.318, opacity: 1)
    public static let lightTextTextInverse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightTextTextOnColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lightTextTextOnColorDisabled = Color(red: 0.918, green: 0.918, blue: 0.925, opacity: 1)
    public static let lightTextTextPlaceholder = Color(red: 0.588, green: 0.588, blue: 0.624, opacity: 1)
    public static let lightTextTextPrimary = Color(red: 0.043, green: 0.043, blue: 0.063, opacity: 1)
    public static let lightTextTextSecondary = Color(red: 0.392, green: 0.388, blue: 0.455, opacity: 1)
    public static let lightTransparentTransparent = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let lineHeightsBodyMedium = CGFloat(1.6)
    public static let lineHeightsBodySmall = CGFloat(1.6)
    public static let lineHeightsHeading = CGFloat(1.25)
    public static let lineHeightsTextField = CGFloat(1.25)
    public static let link = "underline"
    public static let opacityHigh = 0.9
    public static let opacityLow = 0.1
    public static let opacityMd = 0.5
    public static let paragraphSpacingH1 = CGFloat(32)
    public static let paragraphSpacingH2 = CGFloat(26)
    public static let sizingLg = CGFloat(13.5)
    public static let sizingMd = CGFloat(9)
    public static let sizingScale = CGFloat(1.5)
    public static let sizingSm = CGFloat(6)
    public static let sizingXl = CGFloat(20.25)
    public static let sizingXs = CGFloat(4)
    public static let spacingLg = CGFloat(32)
    public static let spacingMd = CGFloat(16)
    public static let spacingScale = CGFloat(2)
    public static let spacingSm = CGFloat(8)
    public static let spacingXl = CGFloat(64)
    public static let spacingXs = CGFloat(4)
}
